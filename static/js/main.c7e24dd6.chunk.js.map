{"version":3,"sources":["Start.js","End.js","ScoreCard.js","App.js","serviceWorker.js","index.js"],"names":["Start","props","react_default","a","createElement","className","type","onClick","startGame","End","currentScore","ScoreCard","score","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentScreen","highestScore","snakeLength","snakeBody","snakePosition","x","y","starPosition","iteration","snakeSpeed","canvasWidth","canvasHeight","canvasRef","React","createRef","bind","assertThisInitialized","min","max","Math","floor","random","canvas","current","context","getContext","requestAnimationFrame","_this2","console","log","setState","clearRect","unshift","length","pop","fillStyle","fillRect","forEach","cell","index","_this3","randomNumberGen","i","highScore","highscore","anim","e","keyCode","src_Start","onKeyDown","decideDirection","ref","width","height","src_ScoreCard","src_End","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7e24dd6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Start(props) {\n    return (\n        <button\n            className = \"start-button\"\n            type = \"button\"\n            onClick = {props.startGame}\n        >\n            Play Snak3s!\n        </button>\n    );\n}\n\nexport default Start;","import React from 'react';\n\nfunction End(props) {\n    return (\n        <div>\n            <h1>GAME OVER!</h1>\n            <h2>You scored: {props.currentScore}</h2>\n        </div>\n    );\n}\n\nexport default End;","import React from 'react';\n\nfunction ScoreCard(props) {\n    return (\n        <h2><em>{props.score}</em></h2>\n    );\n}\n\nexport default ScoreCard;","import React from 'react';\nimport './App.css';\nimport Start from './Start';\nimport End from './End';\nimport ScoreCard from './ScoreCard';\n\nclass App extends React.Component { \n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScreen: 'start',\n      highestScore: 0,\n      currentScore: 0,\n      snakeLength: 3,\n      snakeBody: [],\n      snakePosition: {\n        x: 30,\n        y: 30\n      },\n      starPosition: {\n        x: 325,\n        y: 20\n      },\n      iteration: 0,\n      snakeSpeed: {\n        x: 5,\n        y: 0\n      },\n      canvasWidth: 500,\n      canvasHeight:500\n    };\n\n    this.canvasRef = React.createRef();\n    this.startGame = this.startGame.bind(this);\n  }\n\n  randomNumberGen(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  /*componentDidMount() {\n    this.canvas = this.canvasRef.current;\n    this.context = this.canvas.getContext('2d');\n    this.anim = requestAnimationFrame(this.startGame);\n  }*/\n\n  componentDidUpdate() {\n    this.canvas = this.canvasRef.current;\n    this.context = this.canvas.getContext('2d');\n    requestAnimationFrame(this.startGame);\n  }\n\n  startGame() {\n    console.log('Startgame triggered');\n\n    this.setState((state) => {\n      return {currentScreen: 'playing'}\n    });\n\n    console.log(this.state.snakePosition.x);\n\n    if(++this.iteration < 4) {\n      return;\n    }\n\n    this.iteration = 0;\n    \n    if(this.context && this.canvas) {\n      this.context.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    }\n\n\n    this.setState((state) => {\n      return {\n        snakePosition: {\n          x: state.snakePosition.x+state.snakeSpeed.x,\n          y: state.snakePosition.y+state.snakeSpeed.y\n        }\n      };\n    });\n\n    if(this.state.snakePosition.x < 0) {\n      this.setState((state) => {\n        return {\n          snakePosition: {\n            x: this.state.canvasWidth - state.snakeSpeed.x,\n            y: state.snakePosition.y\n          }\n        };\n      });\n    }\n    else if(this.state.snakePosition.x >= this.state.canvasWidth) {\n      this.setState((state) => {\n        return {\n          snakePosition: {\n            x: 0,\n            y: state.snakePosition.y\n          }\n        };\n      });\n    }\n\n    if(this.state.snakePosition.y < 0) {\n      this.setState((state) => {\n        return {\n          snakePosition: {\n            x: state.snakeSpeed.x,\n            y: state.canvasHeight - state.snakeSpeed.x\n          }\n        };\n      });\n    }\n    else if(this.state.snakePosition.y >= this.state.canvasHeight) {\n      this.setState((state) => {\n        return {\n          snakePosition: {\n            x: state.snakeSpeed.x,\n            y: 0\n          }\n        };\n      });\n    }\n\n    this.setState((state) => {\n      return {\n        snakeBody: state.snakeBody.unshift({x: state.snakePosition.x, y: state.snakePosition.y})\n      };\n    });\n\n    if(this.state.snakeBody.length > this.state.snakeLength) {\n      this.setState((state) => {\n        return {\n          snakeBody: state.snakeBody.pop()\n        };\n      });\n    }\n\n    this.context.fillStyle = 'yellow';\n    this.context.fillRect(this.state.starPosition.x, this.state.starPosition.y, this.state.snakeSpeed.x - 1, this.state.snakeSpeed.x - 1);\n\n    console.log(\"First print done!\");\n\n    this.context.fillStyle = 'green';\n    this.state.snakeBody.forEach(function(cell, index) {\n      this.context.fillRect(cell.x, cell.y, this.state.snakeSpeed.x - 1, this.state.snakeSpeed.x - 1);\n\n      if(cell.x === this.state.starPosition.x && cell.y === this.state.starPosition.y) {\n        this.setState((state) => {\n          return {\n            snakeLength: state.snakeLength+1,\n            currentScore: (state.currentScore + 10),\n            starPosition: {\n              x: this.randomNumberGen(0, 100) * state.snakeSpeed.x,\n              y: this.randomNumberGen(0, 100) * state.snakeSpeed.x\n            }\n          };\n        });\n      }\n\n      for (var i = index + 1; i < this.state.snakeBody.length; i++) {\n        if (cell.x === this.state.snakeBody[i].x && cell.y === this.state.snakeBody[i].y) {\n          if(this.state.highScore < this.state.currentScore) {\n            this.setState((state) => {\n              return {highScore: state.currentScore}\n            });\n          }\n          else {\n            this.setState((state) => {\n              return {highscore: state.highScore}\n            });\n          }\n          this.setState({\n            currentScreen: 'stop',\n            currentScore: 0,\n            snakeLength: 3,\n            snakeBody: [],\n            snakePosition: {\n              x: 160,\n              y: 160\n            },\n            starPosition: {\n              x: 320,\n              y: 320\n            },\n            snakeSpeed: {\n              x: 16,\n              y: 0\n            }\n          });\n        }\n      }\n    });\n  this.anim = requestAnimationFrame(this.startGame);\n  }\n\n  /*componentWillUnmount() {\n    cancelAnimationFrame(this.anim);\n  }*/\n\n  decideDirection(e) {\n    console.log(e);\n    if(e.keyCode === 37 && this.snakeSpeed.x === 0) {\n      this.snakeSpeed.x = -(this.snakeSpeed.x);\n      this.snakeSpeed.y = 0;\n    }\n    else if(e.keyCode === 38 && this.snakeSpeed.y === 0) {\n      this.snakeSpeed.y = -(this.snakeSpeed.x);\n      this.snakeSpeed.x = 0;\n    }\n    else if(e.keyCode === 39 && this.snakeSpeed.x === 0) {\n      this.snakeSpeed.x = this.snakeSpeed.x;\n      this.snakeSpeed.y = 0;\n    }\n    else if(e.keyCode === 40 && this.snakeSpeed.y === 0) {\n      this.snakeSpeed.y = this.snakeSpeed.x;\n      this.snakeSpeed.x = 0;\n    }\n  }\n\n\n\n  setSpeed() {\n    \n  }\n\n  render() {\n    if(this.state.currentScreen === 'start') {\n      return(\n        <div>\n          <Start startGame = {this.startGame} />\n        </div>\n      );\n    }\n    if(this.state.currentScreen === 'playing') {\n      return(\n        <div \n          className=\"App\"\n          onKeyDown = {this.decideDirection}  \n        >\n          <canvas\n            ref = {this.canvasRef}\n            width = {500}\n            height = {500}\n          />\n          <h2>High Score: </h2><ScoreCard score = {this.state.currentScore} />\n          <h2>Current Score: </h2><ScoreCard score = {this.state.highestScore} />\n        </div>\n      );\n    }\n    if(this.state.currentScreen === 'stop') {\n      return (\n        <End\n          currentScore = {this.currentScore}\n        />\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}