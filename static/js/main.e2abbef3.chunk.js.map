{"version":3,"sources":["Start.js","End.js","ScoreCard.js","App.js","serviceWorker.js","index.js"],"names":["Start","props","react_default","a","createElement","className","type","onClick","startGame","End","currentScore","ScoreCard","score","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentScreen","highestScore","snakeLength","snakeBody","snakePosition","x","y","starPosition","iteration","snakeSpeed","canvasRef","React","createRef","bind","assertThisInitialized","min","max","Math","floor","random","canvas","current","context","getContext","anim","requestAnimationFrame","console","log","setState","clearRect","width","height","unshift","length","pop","fillStyle","fillRect","forEach","cell","index","randomNumberGen","i","highScore","highscore","cancelAnimationFrame","e","keyCode","ref","src_Start","onKeyDown","decideDirection","src_ScoreCard","src_End","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2abbef3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Start(props) {\n    return (\n        <button\n            className = \"start-button\"\n            type = \"button\"\n            onClick = {props.startGame}\n        >\n            Play Snak3s!\n        </button>\n    );\n}\n\nexport default Start;","import React from 'react';\n\nfunction End(props) {\n    return (\n        <div>\n            <h1>GAME OVER!</h1>\n            <h2>You scored: {props.currentScore}</h2>\n        </div>\n    );\n}\n\nexport default End;","import React from 'react';\n\nfunction ScoreCard(props) {\n    return (\n        <h2><em>{props.score}</em></h2>\n    );\n}\n\nexport default ScoreCard;","import React from 'react';\nimport './App.css';\nimport Start from './Start';\nimport End from './End';\nimport ScoreCard from './ScoreCard';\n\nclass App extends React.Component { \n  \n  constructor() {\n    super();\n    this.state = {\n      currentScreen: 'start',\n      highestScore: 0,\n      currentScore: 0,\n      snakeLength: 3,\n      snakeBody: [],\n      snakePosition: {\n        x: 30,\n        y: 30\n      },\n      starPosition: {\n        x: 325,\n        y: 20\n      },\n      iteration: 0,\n      snakeSpeed: {\n        x: 5,\n        y: 0\n      }\n    }\n\n    this.canvasRef = React.createRef();\n    this.startGame = this.startGame.bind(this);\n  }\n\n  randomNumberGen(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  componentDidMount() {\n    this.canvas = this.canvasRef.current;\n    this.context = this.canvas.getContext('2d');\n    this.anim = requestAnimationFrame(this.startGame);\n  }\n\n  startGame() {\n    console.log('Startgame triggered');\n\n    this.setState((state) => {\n      return {currentScreen: 'playing'}\n    });\n\n    if(++this.iteration < 4) {\n      return;\n    }\n\n    this.iteration = 0;\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.snakePosition.x += this.snakeSpeed.x;\n    this.snakePosition.y += this.snakeSpeed.y;\n\n    if(this.snakePosition.x < 0) {\n      this.snakePosition.x = this.canvas.width - this.snakeSpeed.x;\n    }\n    else if(this.snakePosition.x >= this.canvas.width) {\n      this.snakePosition.x = 0;\n    }\n\n    if(this.snakePosition.y < 0) {\n      this.snakePosition.y = this.canvas.height - this.snakeSpeed.x;\n    }\n    else if(this.snakePosition.y >= this.canvas.height) {\n      this.snakePosition.y = 0;\n    }\n\n    this.snakeBody.unshift({x: this.snakePosition.x, y: this.snakePosition.y});\n\n    if(this.snakeBody.length > this.snakeLength) {\n      this.snakeBody.pop();\n    }\n\n    this.context.fillStyle = 'yellow';\n    this.context.fillRect(this.starPosition.x, this.starPosition.y, this.snakeSpeed.x - 1, this.snakeSpeed.x - 1);\n\n    console.log(\"First print done!\");\n\n    this.context.fillStyle = 'green';\n    this.snakeBody.forEach(function(cell, index) {\n      this.context.fillRect(cell.x, cell.y, this.snakeSpeed.x - 1, this.snakeSpeed.x - 1);\n\n      if(cell.x === this.starPosition.x && cell.y === this.starPosition.y) {\n        this.snakeLength++;\n        this.setState((state) => {\n          return {currentScore: (state.currentScore + 10)}\n        });\n        this.starPosition.x = this.randomNumberGen(0, 100) * this.snakeSpeed.x;\n        this.starPosition.y = this.randomNumberGen(0, 100) * this.snakeSpeed.x;\n      }\n\n      for (var i = index + 1; i < this.snakeBody.length; i++) {\n        if (cell.x === this.snakeBody[i].x && cell.y === this.snakeBody[i].y) {\n          if(this.highScore < this.currentScore) {\n            this.setState((state) => {\n              return {highScore: state.currentScore}\n            });\n          }\n          else {\n            this.setState((state) => {\n              return {highscore: state.highScore}\n            });\n          }\n          this.setState({\n            currentScreen: 'stop',\n            currentScore: 0,\n            snakeLength: 3,\n            snakeBody: [],\n            snakePosition: {\n              x: 160,\n              y: 160\n            },\n            starPosition: {\n              x: 320,\n              y: 320\n            },\n            snakeSpeed: {\n              x: 16,\n              y: 0\n            }\n          });\n        }\n      }\n    });\n    this.anim = requestAnimationFrame(this.startGame);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.anim);\n  }\n\n  decideDirection(e) {\n    console.log(e);\n    if(e.keyCode === 37 && this.snakeSpeed.x === 0) {\n      this.snakeSpeed.x = -(this.snakeSpeed.x);\n      this.snakeSpeed.y = 0;\n    }\n    else if(e.keyCode === 38 && this.snakeSpeed.y === 0) {\n      this.snakeSpeed.y = -(this.snakeSpeed.x);\n      this.snakeSpeed.x = 0;\n    }\n    else if(e.keyCode === 39 && this.snakeSpeed.x === 0) {\n      this.snakeSpeed.x = this.snakeSpeed.x;\n      this.snakeSpeed.y = 0;\n    }\n    else if(e.keyCode === 40 && this.snakeSpeed.y === 0) {\n      this.snakeSpeed.y = this.snakeSpeed.x;\n      this.snakeSpeed.x = 0;\n    }\n  }\n\n\n\n  setSpeed() {\n    \n  }\n\n  render() {\n    if(this.state.currentScreen === 'start') {\n      return(\n        <div>\n           <canvas\n            ref = {this.canvasRef}\n            width = {500}\n            height = {500}\n          />\n          <Start \n            startGame = {this.startGame}\n          />\n        </div>\n      );\n    }\n    if(this.state.currentScreen === 'playing') {\n      return(\n        <div \n          className=\"App\"\n          onKeyDown = {this.decideDirection}  \n\n        >\n          <canvas\n            ref = {this.canvasRef}\n            width = {500}\n            height = {500}\n          />\n          <h2>High Score: </h2><ScoreCard score = {this.state.currentScore} />\n          <h2>Current Score: </h2><ScoreCard score = {this.state.highestScore} />\n        </div>\n      );\n    }\n    if(this.state.currentScreen === 'stop') {\n      return (\n        <End\n          currentScore = {this.currentScore}\n        />\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}